; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @attn_forward_stage2_masked(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #0 !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %10 = mul i32 %8, 3, !dbg !10
  %11 = add i32 %10, %9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = mul i32 %5, %8, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr i8, ptr addrspace(1) %3, i64 %15, !dbg !14
  %17 = icmp sgt i32 %5, 0, !dbg !15
  br i1 %17, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !15

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre = zext nneg i32 %13 to i64, !dbg !16
  br label %._crit_edge, !dbg !15

.lr.ph:                                           ; preds = %7
  %factor.op.mul = mul i32 %11, %5, !dbg !15
  %18 = sext i32 %factor.op.mul to i64
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %18
  %.reass = shl i32 %factor.op.mul, 7
  %21 = sext i32 %.reass to i64
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21
  %23 = zext nneg i32 %13 to i64
  %invariant.gep = getelementptr float, ptr addrspace(1) %22, i64 %23, !dbg !15
  %wide.trip.count = zext nneg i32 %5 to i64, !dbg !15
  br label %24, !dbg !15

24:                                               ; preds = %.lr.ph, %61
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %61 ]
  %25 = phi float [ 0.000000e+00, %.lr.ph ], [ %64, %61 ]
  %26 = phi float [ 0.000000e+00, %.lr.ph ], [ %63, %61 ]
  %27 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %62, %61 ]
  %28 = getelementptr i8, ptr addrspace(1) %16, i64 %indvars.iv, !dbg !17
  %29 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %28) #4, !dbg !18
  %.not = icmp eq i8 %29, 0, !dbg !19
  br i1 %.not, label %61, label %30, !dbg !20

30:                                               ; preds = %24
  %31 = getelementptr float, ptr addrspace(1) %19, i64 %indvars.iv, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %31) #4, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %20, i64 %indvars.iv, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %34) #4, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !25
  %38 = shl i32 %37, 7, !dbg !25
  %39 = sext i32 %38 to i64, !dbg !26
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %39, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %gep) #4, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = tail call float @llvm.maxnum.f32(float %27, float %33), !dbg !29
  %43 = fsub float %27, %42, !dbg !30
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %44, 0, !dbg !31
  br i1 %.not.i, label %47, label %45, !dbg !31

45:                                               ; preds = %30
  %46 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %43) #4, !dbg !31
  br label %__nv_exp2f.exit, !dbg !31

47:                                               ; preds = %30
  %48 = tail call float @llvm.nvvm.ex2.approx.f(float %43) #4, !dbg !31
  br label %__nv_exp2f.exit, !dbg !31

__nv_exp2f.exit:                                  ; preds = %45, %47
  %.0.i = phi float [ %46, %45 ], [ %48, %47 ], !dbg !31
  %49 = fsub float %33, %42, !dbg !32
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i2 = icmp eq i32 %50, 0, !dbg !33
  br i1 %.not.i2, label %53, label %51, !dbg !33

51:                                               ; preds = %__nv_exp2f.exit
  %52 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %49) #4, !dbg !33
  br label %__nv_exp2f.exit4, !dbg !33

53:                                               ; preds = %__nv_exp2f.exit
  %54 = tail call float @llvm.nvvm.ex2.approx.f(float %49) #4, !dbg !33
  br label %__nv_exp2f.exit4, !dbg !33

__nv_exp2f.exit4:                                 ; preds = %51, %53
  %.0.i3 = phi float [ %52, %51 ], [ %54, %53 ], !dbg !33
  %55 = fmul float %26, %.0.i, !dbg !34
  %56 = fmul float %.0.i3, %36, !dbg !35
  %57 = fadd float %55, %56, !dbg !36
  %58 = fmul float %25, %.0.i, !dbg !37
  %59 = fmul float %.0.i3, %41, !dbg !38
  %60 = fadd float %58, %59, !dbg !39
  br label %61, !dbg !20

61:                                               ; preds = %__nv_exp2f.exit4, %24
  %62 = phi float [ %42, %__nv_exp2f.exit4 ], [ %27, %24 ], !dbg !20
  %63 = phi float [ %57, %__nv_exp2f.exit4 ], [ %26, %24 ], !dbg !20
  %64 = phi float [ %60, %__nv_exp2f.exit4 ], [ %25, %24 ], !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !15
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !15
  br i1 %exitcond.not, label %._crit_edge, label %24, !dbg !15

._crit_edge:                                      ; preds = %61, %.._crit_edge_crit_edge
  %.pre-phi = phi i64 [ %.pre, %.._crit_edge_crit_edge ], [ %23, %61 ], !dbg !16
  %.lcssa5 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %63, %61 ], !dbg !40
  %.lcssa = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %64, %61 ], !dbg !41
  %65 = fcmp oeq float %.lcssa5, 0.000000e+00, !dbg !42
  %66 = tail call float @llvm.nvvm.div.full(float %.lcssa, float %.lcssa5), !dbg !43
  %67 = select i1 %65, float 0.000000e+00, float %66, !dbg !44
  %68 = shl i32 %11, 7, !dbg !45
  %69 = sext i32 %68 to i64, !dbg !46
  %70 = getelementptr half, ptr addrspace(1) %4, i64 %69, !dbg !46
  %71 = getelementptr half, ptr addrspace(1) %70, i64 %.pre-phi, !dbg !16
  %72 = fptrunc float %67 to half, !dbg !47
  %73 = bitcast half %72 to i16, !dbg !48
  tail call void asm sideeffect "st.global.b16 [ $1 + 0 ], { $0 };", "c,l"(i16 %73, ptr addrspace(1) %71) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ffa_triton_v1016-2.py", directory: "/inspire/hdd/project/embodied-multimodality/liuzhigeng-253108120105/projects/ffa/huffkv-opencompass/opencompass/models/myModel/ffa/ffa_triton")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "attn_forward_stage2_masked", linkageName: "attn_forward_stage2_masked", scope: !1, file: !1, line: 187, type: !6, scopeLine: 187, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 194, column: 28, scope: !5)
!9 = !DILocation(line: 195, column: 28, scope: !5)
!10 = !DILocation(line: 196, column: 24, scope: !5)
!11 = !DILocation(line: 196, column: 28, scope: !5)
!12 = !DILocation(line: 198, column: 26, scope: !5)
!13 = !DILocation(line: 206, column: 44, scope: !5)
!14 = !DILocation(line: 206, column: 34, scope: !5)
!15 = !DILocation(line: 205, column: 23, scope: !5)
!16 = !DILocation(line: 225, column: 30, scope: !5)
!17 = !DILocation(line: 206, column: 51, scope: !5)
!18 = !DILocation(line: 206, column: 23, scope: !5)
!19 = !DILocation(line: 206, column: 58, scope: !5)
!20 = !DILocation(line: 207, column: 11, scope: !5)
!21 = !DILocation(line: 208, column: 50, scope: !5)
!22 = !DILocation(line: 208, column: 26, scope: !5)
!23 = !DILocation(line: 209, column: 50, scope: !5)
!24 = !DILocation(line: 209, column: 26, scope: !5)
!25 = !DILocation(line: 210, column: 61, scope: !5)
!26 = !DILocation(line: 210, column: 56, scope: !5)
!27 = !DILocation(line: 210, column: 65, scope: !5)
!28 = !DILocation(line: 210, column: 26, scope: !5)
!29 = !DILocation(line: 212, column: 36, scope: !5)
!30 = !DILocation(line: 213, column: 35, scope: !5)
!31 = !DILocation(line: 213, column: 29, scope: !5)
!32 = !DILocation(line: 214, column: 35, scope: !5)
!33 = !DILocation(line: 214, column: 29, scope: !5)
!34 = !DILocation(line: 216, column: 28, scope: !5)
!35 = !DILocation(line: 216, column: 43, scope: !5)
!36 = !DILocation(line: 216, column: 37, scope: !5)
!37 = !DILocation(line: 217, column: 28, scope: !5)
!38 = !DILocation(line: 217, column: 43, scope: !5)
!39 = !DILocation(line: 217, column: 37, scope: !5)
!40 = !DILocation(line: 202, column: 25, scope: !5)
!41 = !DILocation(line: 203, column: 26, scope: !5)
!42 = !DILocation(line: 222, column: 24, scope: !5)
!43 = !DILocation(line: 223, column: 67, scope: !5)
!44 = !DILocation(line: 223, column: 61, scope: !5)
!45 = !DILocation(line: 225, column: 26, scope: !5)
!46 = !DILocation(line: 225, column: 17, scope: !5)
!47 = !DILocation(line: 226, column: 33, scope: !5)
!48 = !DILocation(line: 226, column: 21, scope: !5)
!49 = !DILocation(line: 226, column: 4, scope: !5)
